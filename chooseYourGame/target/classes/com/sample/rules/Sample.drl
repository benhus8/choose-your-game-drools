package com.sample.rules
 
import com.sample.Osoba;
import com.sample.Relacja;
import com.sample.Plec;
import com.sample.DroolsTest;
 
rule "Init"
	when
	then
		Osoba maria          = new Osoba("Maria");
		Osoba ewa            = new Osoba("Ewa");
		Osoba agata          = new Osoba("Agata");
		Osoba anna           = new Osoba("Anna");
		Osoba agnieszka      = new Osoba("Agnieszka");
		Osoba beata          = new Osoba("Beata");
		Osoba iwona          = new Osoba("Iwona");
		Osoba joanna         = new Osoba("Joanna");
		Osoba piotr          = new Osoba("Piotr");
		Osoba adam           = new Osoba("Adam");
		Osoba marek          = new Osoba("Marek");
		Osoba robert         = new Osoba("Robert");
		Osoba jan            = new Osoba("Jan");
		Osoba krzysztof      = new Osoba("Krzysztof");
		Osoba radek          = new Osoba("Radek");
		Osoba darek          = new Osoba("Darek");
		Osoba tomek          = new Osoba("Tomek");
		Osoba jacek          = new Osoba("Jacek");
		
		insert(new Relacja(maria,marek,"rodzic"));
		insert(new Relacja(maria,agata,"rodzic"));
		insert(new Relacja(maria,jan,"rodzic"));
		insert(new Relacja(piotr,marek,"rodzic"));
		insert(new Relacja(piotr,agata,"rodzic"));
		insert(new Relacja(piotr,jan,"rodzic"));
		insert(new Relacja(ewa,anna,"rodzic"));
		insert(new Relacja(ewa,joanna,"rodzic"));
		insert(new Relacja(ewa,krzysztof,"rodzic"));
		insert(new Relacja(adam,anna,"rodzic"));
		insert(new Relacja(adam,joanna,"rodzic"));
		insert(new Relacja(adam,krzysztof,"rodzic"));
		insert(new Relacja(agata,radek,"rodzic"));
		insert(new Relacja(agata,beata,"rodzic"));
		insert(new Relacja(robert,radek,"rodzic"));
		insert(new Relacja(robert,beata,"rodzic"));
		insert(new Relacja(anna,darek,"rodzic"));
		insert(new Relacja(anna,tomek,"rodzic"));
		insert(new Relacja(jan,darek,"rodzic"));
		insert(new Relacja(jan,tomek,"rodzic"));
		insert(new Relacja(agnieszka,jacek,"rodzic"));
		insert(new Relacja(agnieszka,iwona,"rodzic"));
		insert(new Relacja(krzysztof,jacek,"rodzic"));
		insert(new Relacja(krzysztof,iwona,"rodzic"));

end
		

rule "Kobieta"
when
    $relacja : Relacja()
    $osoba : Osoba() from $relacja.osoby
    eval($osoba.getPlec() == Plec.NIEZNANA)
    eval($osoba.imie.matches(".*[a]$"))
then
    for (Relacja rel : $osoba.relacje) {
        rel.setPlecOsoby($osoba, Plec.KOBIETA);
		update(rel);
    }
    System.out.println("Płeć osoby " + $osoba.imie + ": " + $osoba.getPlec());
end

rule "Mezczyzna"
when
    $relacja : Relacja()
    $osoba : Osoba() from $relacja.osoby
    eval($osoba.getPlec() == Plec.NIEZNANA)
    eval(!$osoba.imie.matches(".*[a]$"))
then
    for (Relacja rel : $osoba.relacje) {
        rel.setPlecOsoby($osoba, Plec.MEZCZYZNA);
		update(rel);
    }
    System.out.println("Płeć osoby " + $osoba.imie + ": " + $osoba.getPlec());
end

rule "Ojciec"
when
    $relacja: Relacja()
    $osoba1: Osoba() from $relacja.osoby[0]
    $osoba2: Osoba() from $relacja.osoby[1]
    eval($osoba1.getPlec() == Plec.MEZCZYZNA)
    eval($relacja.relacja == "rodzic")
then
    insert(new Relacja($osoba1, $osoba2, "ojciec"));
    System.out.println($osoba1.imie + " jest ojcem " + $osoba2.imie);
end

rule "Matka"
when
    $relacja: Relacja()
    $osoba1: Osoba() from $relacja.osoby[0]
    $osoba2: Osoba() from $relacja.osoby[1]
    eval($osoba1.getPlec() == Plec.KOBIETA)
    eval($relacja.relacja == "rodzic")
then
    insert(new Relacja($osoba1, $osoba2, "matka"));
    System.out.println($osoba1.imie + " jest matką " + $osoba2.imie);
end

rule "Babcia"
when
    $relacja: Relacja(relacja == "rodzic")
    $babcia: Osoba() from $relacja.osoby[0]
    $dziecko: Osoba() from $relacja.osoby[1]
    $relacja2: Relacja(osoby[0] == $dziecko, relacja == "rodzic")
    eval($babcia.getPlec() == Plec.KOBIETA)
then
    insert(new Relacja($babcia, $relacja2.osoby[1], "babcia"));
    System.out.println($babcia.imie + " jest babcią " + $relacja2.osoby[1].imie);
end

rule "Dziadek"
when
    $relacja: Relacja(relacja == "rodzic")
    $dziadek: Osoba() from $relacja.osoby[0]
    $dziecko: Osoba() from $relacja.osoby[1]
    $relacja2: Relacja(osoby[0] == $dziecko, relacja == "rodzic")
    eval($dziadek.getPlec() == Plec.MEZCZYZNA)
then
    insert(new Relacja($dziadek, $relacja2.osoby[1], "dziadek"));
    System.out.println($dziadek.imie + " jest dziadkiem " + $relacja2.osoby[1].imie);
end

rule "Brat"
when
    $relacja: Relacja(relacja == "matka")
    $matka: Osoba() from $relacja.osoby[0]
    $potomek: Osoba() from $relacja.osoby[1]
    eval($potomek.getPlec() == Plec.MEZCZYZNA)
    $innaRelacja: Relacja(osoby[0] == $matka, osoby[1] != $potomek, relacja == "matka")
then
    insert(new Relacja($potomek, $innaRelacja.osoby[1], "brat"));
    System.out.println($potomek.imie + " jest bratem " + $innaRelacja.osoby[1].imie);
end

rule "Siostra"
when
    $relacja: Relacja(relacja == "matka")
    $matka: Osoba() from $relacja.osoby[0]
    $potomek: Osoba() from $relacja.osoby[1]
    eval($potomek.getPlec() == Plec.KOBIETA)
    $innaRelacja: Relacja(osoby[0] == $matka, osoby[1] != $potomek, relacja == "matka")
then
    insert(new Relacja($potomek, $innaRelacja.osoby[1], "siostra"));
    System.out.println($potomek.imie + " jest siostra " + $innaRelacja.osoby[1].imie);
end


rule "Stryj"
when
	$relacja: Relacja(relacja == "ojciec")
	$ojciec: Osoba() from $relacja.osoby[0]
	$dziecko: Osoba() from $relacja.osoby[1]
	$relacja2: Relacja(osoby[1] == $ojciec, relacja == "brat")
then
	insert(new Relacja($relacja2.osoby[0], $dziecko, "stryj"));
	System.out.println($relacja2.osoby[0].imie + " jest stryjem " + $dziecko.imie);
end

rule "Wuj"
when
	$relacja: Relacja(relacja == "matka")
	$matka: Osoba() from $relacja.osoby[0]
	$dziecko: Osoba() from $relacja.osoby[1]
	$relacja2: Relacja(osoby[1] == $matka, relacja == "brat")
then
	insert(new Relacja($relacja2.osoby[0], $dziecko, "wuj"));
	System.out.println($relacja2.osoby[0].imie + " jest wujem " + $dziecko.imie);
end

query "FindWuj"
    relacja: Relacja(relacja == "wuj")
end

query "FindStryj"
    relacja: Relacja(relacja == "stryj")
end

rule "Kuzyn"
when
    $relacja: Relacja(relacja == "rodzic")
    $rodzic: Osoba() from $relacja.osoby[0]
    $dziecko: Osoba() from $relacja.osoby[1]
    
    $relacja2: Relacja(relacja == "rodzic")
    $rodzic2: Osoba() from $relacja2.osoby[0]
    $dziecko2: Osoba() from $relacja2.osoby[1]
    
    eval($dziecko != $dziecko2)
    eval($rodzic != $rodzic2)
    
    $relacja3: Relacja(osoby[1] == $rodzic, relacja == "matka")
    $relacja4: Relacja(osoby[1] == $rodzic2, relacja == "matka")
	eval($relacja3.osoby[0] == $relacja4.osoby[0])
    
then
    //insert(new Relacja($dziecko, $dziecko2, "kuzyn"));
    System.out.println($dziecko.imie + " kuzyn " + $dziecko2.imie);
end

rule "DrugiKuzyn"
when
    $relacja: Relacja(relacja == "babcia" || relacja == "dziadek")
    $dziadek: Osoba() from $relacja.osoby[0]
    $dziecko: Osoba() from $relacja.osoby[1]
    
    $relacja2: Relacja(osoby[1] == $dziadek, relacja == "brat" || relacja == "siostra")
    $rodzenstwoDziadkow: Osoba() from $relacja2.osoby[0]
    
    $relacja3: Relacja(osoby[0] == $rodzenstwoDziadkow, relacja == "babcia" || relacja == "dziadek")
    $kuzyn: Osoba() from $relacja3.osoby[1]
    eval($kuzyn != $dziecko)
then
    insert(new Relacja($kuzyn, $dziecko, "kuzyn"));
    System.out.println($kuzyn.imie + " kuzyn " + $dziecko.imie);
end
